document.addEventListener('DOMContentLoaded', () => {
    // –û—Å–Ω–æ–≤–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    let tasks = [];
    let currentFilter = 'all';
    
    // –≠–ª–µ–º–µ–Ω—Ç—ã DOM
    const taskInput = document.getElementById('taskInput');
    const addBtn = document.getElementById('addBtn');
    const taskList = document.getElementById('taskList');
    const currentDateEl = document.getElementById('currentDate');
    const filterButtons = document.querySelectorAll('.filter-btn');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∞–π—Ç–∞
    displayCurrentDate();
    loadTasks();
    renderTasks();
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    addBtn.addEventListener('click', addTask);
    taskInput.addEventListener('keypress', (e) => {
        if (e.key === 'Enter') addTask();
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    filterButtons.forEach(btn => {
        btn.addEventListener('click', () => {
            filterButtons.forEach(b => b.classList.remove('active'));
            btn.classList.add('active');
            currentFilter = btn.dataset.filter;
            renderTasks();
        });
    });
    
    // –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã
    function displayCurrentDate() {
        const now = new Date();
        const options = { 
            weekday: 'long', 
            day: 'numeric', 
            month: 'long',
            year: 'numeric'
        };
        currentDateEl.textContent = now.toLocaleDateString('ru-RU', options);
    }
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
    function addTask() {
        const text = taskInput.value.trim();
        if (text === '') return;
        
        const newTask = {
            id: Date.now(),
            text,
            createdAt: new Date().toISOString(),
            dueDate: null,
            completed: false
        };
        
        tasks.push(newTask);
        saveTasks();
        renderTasks();
        
        taskInput.value = '';
        taskInput.focus();
    }
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á
    function saveTasks() {
        localStorage.setItem('tasks', JSON.stringify(tasks));
    }
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞—á
    function loadTasks() {
        const storedTasks = localStorage.getItem('tasks');
        tasks = storedTasks ? JSON.parse(storedTasks) : [];
    }
    
    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–¥–∞—á
    function renderTasks() {
        taskList.innerHTML = '';
        
        // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á
        let filteredTasks = tasks;
        const today = new Date().toISOString().split('T')[0];
        const tomorrow = new Date();
        tomorrow.setDate(tomorrow.getDate() + 1);
        const tomorrowStr = tomorrow.toISOString().split('T')[0];
        
        if (currentFilter === 'today') {
            filteredTasks = tasks.filter(task => task.dueDate === today);
        } else if (currentFilter === 'tomorrow') {
            filteredTasks = tasks.filter(task => task.dueDate === tomorrowStr);
        } else if (currentFilter === 'completed') {
            filteredTasks = tasks.filter(task => task.completed);
        }
        
        // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
        filteredTasks.sort((a, b) => a.completed - b.completed);
        
        // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        if (filteredTasks.length === 0) {
            taskList.innerHTML = '<div class="no-tasks">–ó–∞–¥–∞—á –Ω–µ—Ç</div>';
            return;
        }
        
        filteredTasks.forEach(task => {
            const taskEl = document.createElement('li');
            taskEl.className = 'task-item';
            if (task.completed) taskEl.classList.add('completed');
            
            // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç
            const createdDate = formatDate(new Date(task.createdAt));
            const dueDate = task.dueDate ? formatDate(new Date(task.dueDate)) : null;
            
            taskEl.innerHTML = `
                <div class="task-header">
                    <input type="checkbox" class="task-checkbox" 
                        ${task.completed ? 'checked' : ''}
                        data-id="${task.id}">
                    <div class="task-text ${task.completed ? 'completed' : ''}">${task.text}</div>
                    <div class="task-actions">
                        <button class="date-btn" data-id="${task.id}">üìÜ</button>
                        <button class="delete-btn" data-id="${task.id}">‚úï</button>
                    </div>
                </div>
                <div class="task-meta">
                    <div class="created-date">–°–æ–∑–¥–∞–Ω–æ: ${createdDate}</div>
                    ${dueDate ? `<div class="due-date">–°–¥–µ–ª–∞—Ç—å –¥–æ: ${dueDate}</div>` : ''}
                </div>
            `;
            
            taskList.appendChild(taskEl);
        });
        
        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        document.querySelectorAll('.task-checkbox').forEach(checkbox => {
            checkbox.addEventListener('change', toggleTaskStatus);
        });
        
        document.querySelectorAll('.delete-btn').forEach(btn => {
            btn.addEventListener('click', deleteTask);
        });
        
        document.querySelectorAll('.date-btn').forEach(btn => {
            btn.addEventListener('click', setDueDate);
        });
    }
    
    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏
    function toggleTaskStatus(e) {
        const taskId = parseInt(e.target.dataset.id);
        tasks = tasks.map(task => {
            if (task.id === taskId) {
                return { ...task, completed: !task.completed };
            }
            return task;
        });
        saveTasks();
        renderTasks();
    }
    
    // –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
    function deleteTask(e) {
        const taskId = parseInt(e.target.dataset.id);
        tasks = tasks.filter(task => task.id !== taskId);
        saveTasks();
        renderTasks();
    }
    
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ä–æ–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    function setDueDate(e) {
        const taskId = parseInt(e.target.dataset.id);
        const dueDate = prompt("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2025-07-01):");
        if (!dueDate) return;
        
        // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞
        if (!/^\d{4}-\d{2}-\d{2}$/.test(dueDate)) {
            alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–ì–ì–ì–ì-–ú–ú-–î–î)");
            return;
        }
        
        tasks = tasks.map(task => {
            if (task.id === taskId) {
                return { ...task, dueDate };
            }
            return task;
        });
        
        saveTasks();
        renderTasks();
    }
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
    function formatDate(date) {
        const now = new Date();
        const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());
        const yesterday = new Date(today);
        yesterday.setDate(yesterday.getDate() - 1);
        const tomorrow = new Date(today);
        tomorrow.setDate(tomorrow.getDate() + 1);
        
        if (date.toDateString() === today.toDateString()) {
            return '—Å–µ–≥–æ–¥–Ω—è';
        } else if (date.toDateString() === yesterday.toDateString()) {
            return '–≤—á–µ—Ä–∞';
        } else if (date.toDateString() === tomorrow.toDateString()) {
            return '–∑–∞–≤—Ç—Ä–∞';
        }
        
        return date.toLocaleDateString('ru-RU', {
            day: 'numeric',
            month: 'short'
        });
    }
});
